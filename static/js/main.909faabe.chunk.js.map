{"version":3,"sources":["components/Student.js","components/StudentList.js","App.js","serviceWorker.js","index.js"],"names":["Student","props","tagList","gradeList","useState","showPlus","setShowPlus","showMins","setShowMinus","displayTest","setDisplayTest","input","setInput","tags","setTags","toggle","grades","map","grade","index","key","tag","className","src","pic","alt","onClick","firstName","lastName","email","company","skill","arr","sum","i","length","parseInt","getAverage","enter","event","newTags","indexOf","addTag","target","value","type","placeholder","id","onChange","StudentList","students","setError","setIsLoaded","studentList","setStudentList","keyWord","setKeyWord","useEffect","axios","get","then","res","data","error","filter","x","toLowerCase","includes","searchStudentByName","student","e","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.909faabe.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../student.css'\r\nimport OnEvent from \"react-onevent\";\r\n\r\nconst Student = (props) => {\r\n\r\n    const [showPlus, setShowPlus] = useState(true);\r\n    const [showMins, setShowMinus] = useState(false);\r\n    const [displayTest, setDisplayTest] = useState(false);\r\n    const [input, setInput] = useState('');\r\n    const [tags, setTags] = useState([]);\r\n    let tagList = [];\r\n    let gradeList = [];\r\n\r\n\r\n    const getAverage = (arr) =>{\r\n        let sum = 0;\r\n        for (let i = 0; i< arr.length; i++){\r\n            sum += parseInt(arr[i]);\r\n        }\r\n    return (sum / arr.length);\r\n    }\r\n\r\n    const toggle = () => {\r\n        setShowMinus(!showMins);\r\n        setShowPlus(!showPlus);\r\n        setDisplayTest(!displayTest);\r\n    }\r\n\r\n\r\n    const displayTag = (event) => {\r\n        setInput(event.target.value);\r\n        \r\n    } \r\n\r\n     const addTag = (tag) => {\r\n         let newTags = [...tags, tag]\r\n        setTags(newTags);\r\n\r\n        if (! (tags.indexOf(tag) > -1)) {\r\n            \r\n        }\r\n     }\r\n\r\n    gradeList = props.grades.map((grade, index) => (\r\n        <ul>\r\n            <li key={index}>\r\n                Test {index}: {'    '} {grade} %;\r\n            </li>\r\n        </ul>\r\n        \r\n    ));\r\n\r\n    tagList = tags.map(tag => (\r\n        <li className='tag'>\r\n            {tag}\r\n        </li>\r\n    ));\r\n\r\n    \r\n    return(\r\n        <div className='each-student'>\r\n            <img src={props.pic} alt=\"student avatar\" />\r\n            <div className='button'>\r\n                {showPlus && (<button onClick={toggle}> + </button>)}\r\n                {showMins && (<button onClick={toggle}> - </button>)}\r\n            </div>\r\n            <div className='student-info'>\r\n                <ul>\r\n                    <li className=\"student-name\">\r\n                        {props.firstName} {props.lastName}\r\n                    </li>\r\n                    <li>Email: {props.email}</li>\r\n                    <li>Company: {props.company}</li>\r\n                    <li>Skill: {props.skill}</li>\r\n                    <li>Average: {getAverage(props.grades)}%</li>\r\n                </ul>\r\n\r\n                {displayTest && (\r\n                    <div className = 'test-score'>\r\n                        {gradeList}\r\n                        <ul>\r\n                        {tagList}\r\n                        </ul>\r\n                        <OnEvent enter = {(event) => {addTag(event.target.value)}}>\r\n                            <input type='text' \r\n                            placeholder =\"Enter tag...\"\r\n                            id='add-tag-input'\r\n                            value = {input}\r\n                            onChange = {displayTag}/>\r\n                        </OnEvent>\r\n                        \r\n                    </div>\r\n                )}\r\n                \r\n            </div> \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Student;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Student from './Student';\r\nconst StudentList = (props) => {\r\n\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [studentList, setStudentList] = useState([]);\r\n    const [keyWord, setKeyWord] = useState('');\r\n    let students = [];\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://www.hatchways.io/api/assessment/students\")\r\n        .then(\r\n            res => {\r\n            setStudentList(res.data.students)\r\n            setIsLoaded(true)\r\n            },\r\n        (error) => {\r\n            setError(error);\r\n            setIsLoaded(true);\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    const searchByNameHandler = e => {\r\n            setKeyWord(e.target.value);\r\n        };\r\n    \r\n    const searchStudentByName = (keyWord) => {\r\n        return x => {\r\n          return (\r\n            x.firstName.toLowerCase().includes(keyWord.toLowerCase()) ||\r\n            x.lastName.toLowerCase().includes(keyWord.toLowerCase()) ||\r\n            !keyWord\r\n          );\r\n        };\r\n    };\r\n\r\n\r\n    students = studentList.filter(searchStudentByName(keyWord)).map( (student) => (      \r\n        <Student\r\n        key={student.id}\r\n        id={student.id}\r\n        pic={student.pic}\r\n        firstName={student.firstName}\r\n        lastName={student.lastName}\r\n        email={student.email}\r\n        company={student.company}\r\n        skill={student.skill}\r\n        grades={student.grades}\r\n        tags={student.tags}\r\n    />\r\n    )\r\n);\r\n    return (\r\n     <div>\r\n    \r\n        <div className=\"tagAndName\">\r\n            <form>\r\n                <input\r\n                type=\"text\"\r\n                id='name-input'\r\n                onChange={searchByNameHandler}\r\n                placeholder=\"Search by name...\"\r\n                value={keyWord}\r\n                />\r\n            </form>\r\n            <form>\r\n                <input\r\n                type=\"text\"\r\n                id='tag-input'\r\n                placeholder=\"Search by tag...\"\r\n                value={keyWord}\r\n                />\r\n            </form>\r\n        </div>\r\n         {students}\r\n     </div>\r\n    )\r\n}\r\n\r\nexport default StudentList;","import React from 'react';\nimport './App.css';\nimport StudentList from './components/StudentList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StudentList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}